{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "edcab60a",
   "metadata": {},
   "outputs": [
    {
     "ename": "error",
     "evalue": "OpenCV(4.8.1) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\objdetect\\src\\cascadedetect.cpp:1689: error: (-215:Assertion failed) !empty() in function 'cv::CascadeClassifier::detectMultiScale'\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31merror\u001b[0m                                     Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[42], line 39\u001b[0m\n\u001b[0;32m     34\u001b[0m gray \u001b[38;5;241m=\u001b[39m cv2\u001b[38;5;241m.\u001b[39mbilateralFilter(gray,\u001b[38;5;241m5\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m     37\u001b[0m \u001b[38;5;66;03m#Detecting the face for region of image to be fed to eye classifier\u001b[39;00m\n\u001b[1;32m---> 39\u001b[0m faces \u001b[38;5;241m=\u001b[39m face_cascade\u001b[38;5;241m.\u001b[39mdetectMultiScale(gray, \u001b[38;5;241m1.3\u001b[39m, \u001b[38;5;241m5\u001b[39m,minSize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m200\u001b[39m,\u001b[38;5;241m200\u001b[39m))\n\u001b[0;32m     41\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m(\u001b[38;5;28mlen\u001b[39m(faces)\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m0\u001b[39m):\n\u001b[0;32m     43\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m (x,y,w,h) \u001b[38;5;129;01min\u001b[39;00m faces:\n",
      "\u001b[1;31merror\u001b[0m: OpenCV(4.8.1) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\objdetect\\src\\cascadedetect.cpp:1689: error: (-215:Assertion failed) !empty() in function 'cv::CascadeClassifier::detectMultiScale'\n"
     ]
    }
   ],
   "source": [
    "#All the imports go here\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import cv2\n",
    " \n",
    "#Initializing the face and eye cascade classifiers from xml files\n",
    "\n",
    "face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n",
    "\n",
    "eye_cascade = cv2.CascadeClassifier('haarcascade_eye_tree_eyeglasses.xml')\n",
    " \n",
    "#Variable store execution state\n",
    "\n",
    "first_read = True\n",
    " \n",
    "#Starting the video capture\n",
    "\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "ret,img = cap.read()\n",
    " \n",
    "\n",
    "while(ret):\n",
    "\n",
    "    ret,img = cap.read()\n",
    "\n",
    "    #Converting the recorded image to grayscale\n",
    "\n",
    "    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "    #Applying filter to remove impurities\n",
    "\n",
    "    gray = cv2.bilateralFilter(gray,5,1,1)\n",
    " \n",
    "\n",
    "    #Detecting the face for region of image to be fed to eye classifier\n",
    "\n",
    "    faces = face_cascade.detectMultiScale(gray, 1.3, 5,minSize=(200,200))\n",
    "\n",
    "    if(len(faces)>0):\n",
    "\n",
    "        for (x,y,w,h) in faces:\n",
    "\n",
    "            img = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)\n",
    " \n",
    "\n",
    "            #roi_face is face which is input to eye classifier\n",
    "\n",
    "            roi_face = gray[y:y+h,x:x+w]\n",
    "\n",
    "            roi_face_clr = img[y:y+h,x:x+w]\n",
    "\n",
    "            eyes = eye_cascade.detectMultiScale(roi_face,1.3,5,minSize=(50,50))\n",
    " \n",
    "\n",
    "            #Examining the length of eyes object for eyes\n",
    "\n",
    "            if(len(eyes)>=2):\n",
    "\n",
    "                #Check if program is running for detection \n",
    "\n",
    "                if(first_read):\n",
    "\n",
    "                    cv2.putText(img, \n",
    "\n",
    "                    \"Eye detected press s to begin\", \n",
    "\n",
    "                    (70,70),  \n",
    "\n",
    "                    cv2.FONT_HERSHEY_PLAIN, 3,\n",
    "\n",
    "                    (0,255,0),2)\n",
    "\n",
    "                else:\n",
    "\n",
    "                    cv2.putText(img, \n",
    "\n",
    "                    \"Eyes open!\", (70,70), \n",
    "\n",
    "                    cv2.FONT_HERSHEY_PLAIN, 2,\n",
    "\n",
    "                    (255,255,255),2)\n",
    "\n",
    "            else:\n",
    "\n",
    "                if(first_read):\n",
    "\n",
    "                    #To ensure if the eyes are present before starting\n",
    "\n",
    "                    cv2.putText(img, \n",
    "\n",
    "                    \"No eyes detected\", (70,70),\n",
    "\n",
    "                    cv2.FONT_HERSHEY_PLAIN, 3,\n",
    "\n",
    "                    (0,0,255),2)\n",
    "\n",
    "                else:\n",
    "\n",
    "                    #This will print on console and restart the algorithm\n",
    "\n",
    "                    print(\"Blink detected--------------\")\n",
    "\n",
    "                    cv2.waitKey(3000)\n",
    "\n",
    "                    first_read=True\n",
    "\n",
    "             \n",
    "\n",
    "    else:\n",
    "\n",
    "        cv2.putText(img,\n",
    "\n",
    "        \"No face detected\",(100,100),\n",
    "\n",
    "        cv2.FONT_HERSHEY_PLAIN, 3, \n",
    "\n",
    "        (0,255,0),2)\n",
    " \n",
    "\n",
    "    #Controlling the algorithm with keys\n",
    "\n",
    "    cv2.imshow('img',img)\n",
    "\n",
    "    a = cv2.waitKey(1)\n",
    "\n",
    "    if(a==ord('q')):\n",
    "\n",
    "        break\n",
    "\n",
    "    elif(a==ord('s') and first_read):\n",
    "\n",
    "        #This will start the detection\n",
    "\n",
    "        first_read = False\n",
    " \n",
    "cap.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21298b27",
   "metadata": {},
   "outputs": [],
   "source": [
    "# All the imports go here\n",
    "import numpy as np\n",
    "import cv2\n",
    "\n",
    "# Initializing the face and eye cascade classifiers from xml files\n",
    "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n",
    "eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye_tree_eyeglasses.xml')\n",
    "\n",
    "# Variable to store execution state\n",
    "first_read = True\n",
    "\n",
    "# Starting the video capture\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "while True:\n",
    "    ret, img = cap.read()\n",
    "\n",
    "    # Converting the recorded image to grayscale\n",
    "    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "    # Applying filter to remove impurities\n",
    "    gray = cv2.bilateralFilter(gray, 5, 1, 1)\n",
    "\n",
    "    # Detecting the face for the region of the image to be fed to the eye classifier\n",
    "    faces = face_cascade.detectMultiScale(gray, 1.3, 5, minSize=(200, 200))\n",
    "\n",
    "    if len(faces) > 0:\n",
    "        for (x, y, w, h) in faces:\n",
    "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)\n",
    "\n",
    "            # ROI_face is the face which is input to the eye classifier\n",
    "            roi_face = gray[y:y + h, x:x + w]\n",
    "            roi_face_clr = img[y:y + h, x:x + w]\n",
    "\n",
    "            eyes = eye_cascade.detectMultiScale(roi_face, 1.3, 5, minSize=(50, 50))\n",
    "\n",
    "            # Examining the length of eyes object for eyes\n",
    "            if len(eyes) >= 2:\n",
    "                # Check if the program is running for detection\n",
    "                if first_read:\n",
    "                    cv2.putText(img, \"Eyes detected. Press 's' to begin\", (70, 70),\n",
    "                                cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 2)\n",
    "                else:\n",
    "                    cv2.putText(img, \"Eyes open!\", (70, 70),\n",
    "                                cv2.FONT_HERSHEY_PLAIN, 2, (255, 255, 255), 2)\n",
    "            else:\n",
    "                if first_read:\n",
    "                    # To ensure if the eyes are present before starting\n",
    "                    cv2.putText(img, \"No eyes detected\", (70, 70),\n",
    "                                cv2.FONT_HERSHEY_PLAIN, 3, (0, 0, 255), 2)\n",
    "                else:\n",
    "                    # This will print on the console and restart the algorithm\n",
    "                    print(\"Blink detected--------------\")\n",
    "                    cv2.waitKey(3000)\n",
    "                    first_read = True\n",
    "    else:\n",
    "        cv2.putText(img, \"No face detected\", (100, 100),\n",
    "                    cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 2)\n",
    "\n",
    "    # Controlling the algorithm with keys\n",
    "    cv2.imshow('img', img)\n",
    "    a = cv2.waitKey(1)\n",
    "\n",
    "    if a == ord('q'):\n",
    "        break\n",
    "    elif a == ord('s') and first_read:\n",
    "        # This will start the detection\n",
    "        first_read = False\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af820a6d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
